
import mxnet as mx


def residual_unit(data, num_filter, stride, dim_match, name, bottle_neck=True, bn_mom=0.9, workspace=512,
                  memonger=False):

    if bottle_neck:
        bn1 = mx.sym.BatchNorm(data=data, fix_gamma=False, eps=2e-5, momentum=bn_mom, name=name + '_bn1')
        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')
        conv1 = mx.sym.Convolution(data=act1, num_filter=int(num_filter * 0.25), kernel=(1, 1), stride=(1, 1),
                                   pad=(0, 0),
                                   no_bias=True, workspace=workspace, name=name + '_conv1')
        bn2 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, eps=2e-5, momentum=bn_mom, name=name + '_bn2')
        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')
        # conv2 = mx.sym.Convolution(data=act2, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1,1),
        #                            pad=(1, 1),
        #                            no_bias=True, workspace=workspace, name=name + '_conv2')
        conv2 = mx.sym.Convolution(data=act2, num_filter=int(num_filter * 0.25), kernel=(3, 3), stride=(1,1),
                                   pad=(1, 1),
                                   no_bias=True, workspace=workspace, name=name + '_conv2')
        bn3 = mx.sym.BatchNorm(data=conv2, fix_gamma=False, eps=2e-5, momentum=bn_mom, name=name + '_bn3')
        act3 = mx.sym.Activation(data=bn3, act_type='relu', name=name + '_relu3')
        conv3 = mx.sym.Convolution(data=act3, num_filter=num_filter, kernel=(1, 1), stride=(1, 1), pad=(0, 0),
                                   no_bias=True,
                                   workspace=workspace, name=name + '_conv3')

        # squeeze = mx.sym.Pooling(data=conv3, global_pool=True, kernel=(7, 7), pool_type='avg', name=name + '_squeeze')
        # squeeze = mx.symbol.Flatten(data=squeeze, name=name + '_flatten')
        # excitation = mx.symbol.FullyConnected(data=squeeze, num_hidden=int(num_filter * ratio),
        #                                       name=name + '_excitation1')
        # excitation = mx.sym.Activation(data=excitation, act_type='relu', name=name + '_excitation1_relu')
        # excitation = mx.symbol.FullyConnected(data=excitation, num_hidden=num_filter, name=name + '_excitation2')
        # excitation = mx.sym.Activation(data=excitation, act_type='sigmoid', name=name + '_excitation2_sigmoid')
        # conv3 = mx.symbol.broadcast_mul(conv3, mx.symbol.reshape(data=excitation, shape=(-1, num_filter, 1, 1)))

        if dim_match:
            shortcut = data
        else:
            # shortcut = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(1, 1), stride=(1,1), no_bias=True,
            shortcut = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(1, 1), stride=(1,1), no_bias=True,
                                          workspace=workspace, name=name + '_sc')
        if memonger:
            shortcut._set_attr(mirror_stage='True')
        return conv3 + shortcut
    else:
        bn1 = mx.sym.BatchNorm(data=data, fix_gamma=False, momentum=bn_mom, eps=2e-5, name=name + '_bn1')
        act1 = mx.sym.Activation(data=bn1, act_type='relu', name=name + '_relu1')
        # conv1 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1,1), pad=(1, 1),
        conv1 = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(3, 3), stride=(1,1), pad=(1, 1),
                                   no_bias=True, workspace=workspace, name=name + '_conv1')
        bn2 = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=bn_mom, eps=2e-5, name=name + '_bn2')
        act2 = mx.sym.Activation(data=bn2, act_type='relu', name=name + '_relu2')
        conv2 = mx.sym.Convolution(data=act2, num_filter=num_filter, kernel=(3, 3), stride=(1, 1), pad=(1, 1),
                                   no_bias=True, workspace=workspace, name=name + '_conv2')

        # squeeze = mx.sym.Pooling(data=conv2, global_pool=True, kernel=(7, 7), pool_type='avg', name=name + '_squeeze')
        # squeeze = mx.symbol.Flatten(data=squeeze, name=name + '_flatten')
        # excitation = mx.symbol.FullyConnected(data=squeeze, num_hidden=int(num_filter * ratio),
        #                                       name=name + '_excitation1')
        # excitation = mx.sym.Activation(data=excitation, act_type='relu', name=name + '_excitation1_relu')
        # excitation = mx.symbol.FullyConnected(data=excitation, num_hidden=num_filter, name=name + '_excitation2')
        # excitation = mx.sym.Activation(data=excitation, act_type='sigmoid', name=name + '_excitation2_sigmoid')
        # conv2 = mx.symbol.broadcast_mul(conv2, mx.symbol.reshape(data=excitation, shape=(-1, num_filter, 1, 1)))

        if dim_match:
            shortcut = data
        else:
            # shortcut = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(1, 1), stride=stride, no_bias=True,
            shortcut = mx.sym.Convolution(data=act1, num_filter=num_filter, kernel=(1, 1), stride=(1,1), no_bias=True,
                                          workspace=workspace, name=name + '_sc')
        if memonger:
            shortcut._set_attr(mirror_stage='True')
        return conv2 + shortcut


def Aggregation_Node(data,channel,name):
    conv1 = mx.sym.Convolution(data=data, num_filter=channel, kernel=(1,1), stride=(1, 1), pad=(0, 0),
                               no_bias=True,name=name + '_ag_conv')
    # conv1 = mx.sym.Convolution(data =data,Kernel = (1,1),num_filter = channel,stride = (1,1),pad = (0,0),no_bias=True, name=name + '_conv')
    bn = mx.sym.BatchNorm(data=conv1, fix_gamma=False, momentum=0.9, eps=2e-5, name=name + '_ag_bn')
    act = mx.sym.Activation(data=bn, act_type='relu', name=name + '_ag_relu')
    return act


def one_aggregation(input_data, name, filter, bottle_neck=True, memonger=False, workspace=512,out=False):

    input_data_pool = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0))

    stage_1 = residual_unit(input_data_pool, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 1), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_2 = residual_unit(stage_1, filter, (1, 1), False,
                         name='stage%d_unit%d' % (name, 2), bottle_neck=bottle_neck, workspace=workspace,
                         memonger=memonger)
    if out:
        ag_node_1_conv = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0),
                                        name='ag_node_%d_1_conv' % name)
        stage_sum_3 = mx.symbol.Concat(stage_1, stage_2, ag_node_1_conv)
    else:
        stage_sum_3 = mx.symbol.Concat(stage_1, stage_2)
    # stage_sum_3 = mx.sym.ElementWiseSum(stage3_1, stage3_2)
    ag_node_1 = Aggregation_Node(stage_sum_3, filter, name='ag_node_%d_1' % name)
    return ag_node_1

def two_aggregation(input_data, name, filter, bottle_neck=True, memonger=False, workspace=512,ida = True,dim=True):

    input_data_pool = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0))
    if dim:
        stage_1 = residual_unit(input_data_pool, filter, (1, 1), False,
                                 name='stage%s_unit%d' % (str(name), 1), bottle_neck=bottle_neck, workspace=workspace,
                                 memonger=memonger)
    else:
        stage_1 = residual_unit(input_data, filter, (1, 1), False,
                                name='stage%s_unit%d' % (str(name), 1), bottle_neck=bottle_neck, workspace=workspace,
                                memonger=memonger)
    stage_2 = residual_unit(stage_1, filter, (1, 1), False,
                             name='stage%s_unit%d' % (str(name), 2), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_sum_1 = mx.symbol.Concat(stage_1, stage_2)
    # stage_sum_4_1 = mx.sym.ElementWiseSum(stage4_1, stage4_2)
    ag_node_1 = Aggregation_Node(stage_sum_1, filter, name='ag_node_%s_1' % str(name))
    stage_3 = residual_unit(ag_node_1, filter, (1, 1), False,
                             name='stage%s_unit%d' % (str(name), 3), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_4 = residual_unit(stage_3, filter, (1, 1), False,
                             name='stage%s_unit%d' % (str(name), 4), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    # ag_node_3_1 pooling
    # ag_node_3_1_conv = mx.sym.Convolution(data=ag_node_3_1, num_filter=filter_list[2], kernel=(3, 3), stride=(2, 2), pad=(1, 1),
    #                            no_bias=True, workspace=workspace, name='ag_node_3_1_conv')
    if ida:
        if dim:
            ag_node_1_conv = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0),
                                              name='ag_node_%s_1_conv'% str(name))
            stage_sum_2 = mx.symbol.Concat(ag_node_1_conv, ag_node_1, stage_3, stage_4)
        else:
            stage_sum_2 = mx.symbol.Concat(input_data, ag_node_1, stage_3, stage_4)
    else:
        stage_sum_2 = mx.symbol.Concat(ag_node_1, stage_3, stage_4)
    # stage_sum_4_2 = mx.sym.ElementWiseSum(ag_node_3_1_conv, ag_node_4_1, stage4_3, stage4_4)
    ag_node_2 = Aggregation_Node(stage_sum_2, filter, name='ag_node_%s_2'% str(name))

    return ag_node_2


def three_aggregation(input_data, name, filter, bottle_neck=True, memonger=False, workspace=512):

    ainput_data_pool = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0))
    stage_1 = residual_unit(ainput_data_pool, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 1), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_2 = residual_unit(stage_1, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 2), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_sum_1 = mx.symbol.Concat(stage_1, stage_2)
    # stage_sum_5_1 = mx.sym.ElementWiseSum(stage5_1, stage5_2)
    ag_node_1 = Aggregation_Node(stage_sum_1, filter, name='ag_node_%d_1' % name)
    stage_3 = residual_unit(ag_node_1, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 3), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_4 = residual_unit(stage_3, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 4), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_sum_2 = mx.symbol.Concat(stage_3, stage_4, ag_node_1)
    # stage_sum_5_2 = mx.sym.ElementWiseSum(stage5_3, stage5_4,ag_node_5_1 )
    ag_node_2 = Aggregation_Node(stage_sum_2, filter, name='ag_node_%d_2'% name)
    stage_5 = residual_unit(ag_node_2, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 5), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_6 = residual_unit(stage_5, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 6), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    # ag_node_4_2  pooling
    # ag_node_4_2_conv = mx.sym.Convolution(data=ag_node_4_2, num_filter=filter_list[3], kernel=(3, 3), stride=(2, 2),
    #                                       pad=(1, 1),
    #                                       no_bias=True, workspace=workspace, name='ag_node_4_2_convpool')
    ag_node_2_conv = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0),
                                      name='ag_node_%d_1_convpool'% name)
    stage_sum_3 = mx.symbol.Concat(ag_node_2_conv, ag_node_1, ag_node_2, stage_5, stage_6)
    # stage_sum_5_3 = mx.sym.ElementWiseSum(ag_node_4_2_conv,ag_node_5_1, ag_node_5_2, stage5_5, stage5_6)
    ag_node_3 = Aggregation_Node(stage_sum_3, filter, name='ag_node_%d_3'% name)

    return ag_node_3


def four_aggregation(input_data, name, filter, bottle_neck=True, memonger=False, workspace=512):

    ainput_data_pool = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0))
    stage_1 = residual_unit(ainput_data_pool, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 1), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_2 = residual_unit(stage_1, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 2), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_sum_1 = mx.symbol.Concat(stage_1, stage_2)
    # stage_sum_5_1 = mx.sym.ElementWiseSum(stage5_1, stage5_2)
    ag_node_1 = Aggregation_Node(stage_sum_1, filter, name='ag_node_%d_1'% name)
    stage_3 = residual_unit(ag_node_1, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 3), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_4 = residual_unit(stage_3, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 4), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_sum_2 = mx.symbol.Concat(stage_3, stage_4, ag_node_1)
    # stage_sum_5_2 = mx.sym.ElementWiseSum(stage5_3, stage5_4,ag_node_5_1 )
    ag_node_2 = Aggregation_Node(stage_sum_2, filter, name='ag_node_%d_2'% name)
    stage_5 = residual_unit(ag_node_2, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 5), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_6 = residual_unit(stage_5, filter, (1, 1), False,
                             name='stage%d_unit%d' % (name, 6), bottle_neck=bottle_neck, workspace=workspace,
                             memonger=memonger)
    stage_sum_3 = mx.symbol.Concat(stage_5, stage_6)
    # stage_sum_5_2 = mx.sym.ElementWiseSum(stage5_3, stage5_4,ag_node_5_1 )
    ag_node_3 = Aggregation_Node(stage_sum_3, filter, name='ag_node_%d_3'% name)
    stage_7 = residual_unit(ag_node_3, filter, (1, 1), False,
                            name='stage%d_unit%d' % (name, 7), bottle_neck=bottle_neck, workspace=workspace,
                            memonger=memonger)
    stage_8 = residual_unit(stage_7, filter, (1, 1), False,
                        name='stage%d_unit%d' % (name, 8), bottle_neck=bottle_neck, workspace=workspace,
                        memonger=memonger)
    # ag_node_4_2  pooling
    # ag_node_4_2_conv = mx.sym.Convolution(data=ag_node_4_2, num_filter=filter_list[3], kernel=(3, 3), stride=(2, 2),
    #                                       pad=(1, 1),
    #                                       no_bias=True, workspace=workspace, name='ag_node_4_2_convpool')
    ag_node_2_conv = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0),
                                      name='ag_node_%d_1_convpool'% name)
    stage_sum_4 = mx.symbol.Concat(ag_node_2_conv, ag_node_3, ag_node_2, stage_7, stage_8)
    # stage_sum_5_3 = mx.sym.ElementWiseSum(ag_node_4_2_conv,ag_node_5_1, ag_node_5_2, stage5_5, stage5_6)
    ag_node_4 = Aggregation_Node(stage_sum_4, filter, name='ag_node_%d_4' % name)

    return ag_node_4

def five_aggregation(input_data, name, filter, bottle_neck=True, memonger=False, workspace=512):
    input_data_pool = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0))
    two_ag_node_1 = two_aggregation(input_data_pool, str(name)+'_1', filter, bottle_neck=True, memonger=False, workspace=512, ida=True, dim=False)
    two_ag_node_2 = two_aggregation(two_ag_node_1, str(name)+'_2', filter, bottle_neck=True, memonger=False, workspace=512, ida=True, dim=False)
    stage1 = residual_unit(two_ag_node_2, filter, (1, 1), False,
                            name='stage%s_unit%d' % (str(name)+'_3', 3), bottle_neck=bottle_neck, workspace=workspace,
                            memonger=memonger)

    stage2 = residual_unit(stage1, filter, (1, 1), False,
                        name='stage%s_unit%d' % (str(name)+'_4', 4), bottle_neck=bottle_neck, workspace=workspace,
                        memonger=memonger)
    ag_node_2_conv = mx.sym.Pooling(data=input_data, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0),
                                    name='ag_node_%d_1_convpool' % name)
    stage_sum_4 = mx.symbol.Concat(ag_node_2_conv, two_ag_node_1, two_ag_node_2, stage1, stage2)
    # stage_sum_5_3 = mx.sym.ElementWiseSum(ag_node_4_2_conv,ag_node_5_1, ag_node_5_2, stage5_5, stage5_6)
    ag_node_4 = Aggregation_Node(stage_sum_4, filter, name='ag_node_%d_3'%name)

    return ag_node_4

# def ldanet(units, num_stage, filter_list, ratio_list, num_class, data_type, bottle_neck=True, bn_mom=0.9, workspace=512,
#            memonger=False):
def ldanet( num_class, model_type, bottle_neck=True, bn_mom=0.9, workspace=512, memonger=False):

    filter_list = [16,32,128,256,512,1024]

    data = mx.sym.Variable(name='data')
    data = mx.sym.BatchNorm(data=data, fix_gamma=True, eps=2e-5, momentum=bn_mom, name='bn_data')
    body = mx.sym.Convolution(data=data, num_filter=filter_list[0], kernel=(3, 3), stride=(1, 1), pad=(1, 1),
                                  no_bias=True, name="conv0", workspace=workspace)                                        #96 112

    stage1 = residual_unit(body, filter_list[0], (1, 1), False,
                         name='stage%d' % (1), bottle_neck=bottle_neck, workspace=workspace,memonger=memonger)
    # stage1 = mx.sym.Pooling(data=stage1, kernel=(2, 2), pool_type='max',stride=(2, 2), pad=(0, 0))                       #48 56

    stage2 = residual_unit(stage1, filter_list[1], (1, 1), False,
                         name='stage%d' % (2), bottle_neck=bottle_neck, workspace=workspace,memonger=memonger)
    # stage2 = mx.sym.Pooling(data=stage2, kernel=(2, 2), pool_type='max', stride=(2, 2), pad=(0, 0))                      #24 28

    if model_type == 102:

        stage3_ag_node = one_aggregation(stage2, 3, filter=filter_list[2], bottle_neck=True, memonger=False, workspace=512, out=False)

        stage4_ag_node = three_aggregation(stage3_ag_node, 4, filter=filter_list[3], bottle_neck=True, memonger=False, workspace=512)

        stage5_ag_node = four_aggregation(stage4_ag_node, 5, filter=filter_list[4], bottle_neck=True, memonger=False, workspace=512)

        stage6_ag_node = one_aggregation(stage5_ag_node, 6, filter=filter_list[5], bottle_neck=True, memonger=False, workspace=512,
                                         out=True)

        pool1 = mx.symbol.Pooling(data=stage6_ag_node, global_pool=True, kernel=(7, 7), pool_type='avg', name='avgpool')
        flat = mx.symbol.Flatten(data=pool1)
        fc1 = mx.symbol.FullyConnected(data=flat, num_hidden=num_class, name='fc1')
        return fc1
    elif model_type == 60:

        stage3_ag_node = one_aggregation(stage2, 3, filter=filter_list[2], bottle_neck=True, memonger=False,
                                         workspace=512, out=False)

        stage4_ag_node = two_aggregation(stage3_ag_node, 4, filter=filter_list[3], bottle_neck=True, memonger=False, workspace=512)

        stage5_ag_node = three_aggregation(stage4_ag_node, 5, filter=filter_list[4], bottle_neck=True, memonger=False,
                                           workspace=512)

        stage6_ag_node = one_aggregation(stage5_ag_node, 6, filter=filter_list[5], bottle_neck=True, memonger=False,
                                         workspace=512,
                                         out=True)

        pool1 = mx.symbol.Pooling(data=stage6_ag_node, global_pool=True, kernel=(7, 7), pool_type='avg', name='avgpool')
        flat = mx.symbol.Flatten(data=pool1)
        fc1 = mx.symbol.FullyConnected(data=flat, num_hidden=num_class, name='fc1')
        return fc1

    elif model_type == 169:

        stage3_ag_node = two_aggregation(stage2, 3, filter=filter_list[2], bottle_neck=True, memonger=False,
                                         workspace=512)

        stage4_ag_node = three_aggregation(stage3_ag_node, 4, filter=filter_list[3], bottle_neck=True, memonger=False,
                                           workspace=512)

        stage5_ag_node = five_aggregation(stage4_ag_node, 5, filter=filter_list[4], bottle_neck=True, memonger=False, workspace=512)

        stage6_ag_node = one_aggregation(stage5_ag_node, 6, filter=filter_list[5], bottle_neck=True, memonger=False,
                                         workspace=512,
                                         out=True)

        pool1 = mx.symbol.Pooling(data=stage6_ag_node, global_pool=True, kernel=(7, 7), pool_type='avg', name='avgpool')
        flat = mx.symbol.Flatten(data=pool1)
        fc1 = mx.symbol.FullyConnected(data=flat, num_hidden=num_class, name='fc1')
        return fc1


